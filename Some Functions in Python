zip(): to iterate over two lists together for eg:
      a=[1,2,3]
      b=[5,6,7]
      for i,j in zip(a,b)
        print(i)
        print(j)
------------------------------------------------------------
slice(): to sice the things in two lists:
    a=[1,2,3,4,5,6,7,8]
    s=slice(3)
    a[s] will give you [1,2,3]

    s=slice(3,6)
    a[s] => [4,5,6]

-----------------------------------------------------------

join() : joins a sequence in such a way that output is string
  a=['a', 'b', 'c']
  "".join(a) => "abc"

  "$".join(a) => "a$b$c"

-----------------------------------------------------------
range (n) gives 0 till n-1
eg : range(5) => 0,1,2,3,4

a=[1,2,3,4]
a="smarty"
for i in range(len(a)):
      print (a[i])

-----------------------------------------------------------

Square brackets in python:

ls=['a', 'b', 'c', 'd']

ls[0:len(ls)]=['a', 'b', 'c', 'd']
ls[1:3]= ['b', 'c'] as we exclude the actual end_index element

ls[:3]=['a', 'b', 'c'] (from beginning to end_index -1)
ls[2:]= ['c', 'd'] (from index to end)

-----------------------------------------------------------

Stack implementation in Python:

stack1 = deque()
stack1.append('a')
stack1.pop() //removes the last appended element just like stack

//list can also be used but list takes O(n) complexity to append the element whereas deque takes O(1) 

l1=['a', 'c', 'd']
stack1=deque(l1)

Manipulation of list seems easier in deque:
In the below way, we gave control from both ends for deletion and addition
stack1.appendleft('f')
stack1.popleft()

stack1.index("c") // index function can be used with string and list also as it returns the first occurence
-----------------------------------------------------------

->Convert String to a list of elements:
s1="abcd"
l1=list(s1)

->perform the operation like replacing the element:

l1[2]="e"
s2 = "".join(l1)

s2 will be "abed" now

->For replacing the each word in a string, simply use:
s1= "helloe world hello"
s2=s1.replace("hello", "hi") //can't change s1 as s1 is immutable so copying it to s2
s2 will be => hi world hi

-----------------------------------------------------------

Upper() and Lower() :

s1="abcdEF"
s1.isupper() //False
s1.islower() // False
s1.upper() // "ABCDEF"
s1.lower() // "abcdef"

--------------------------------------------------------------

Searching word in string:

s1 = "hello world"
"hello" in s1 // True

----------------------------------------------------------

ASCII value of a string char

s="f"
ord(s)

----------------------------------------------------------

append means, adding one element
extend means adding an iterable to list (can also be done with +)

eg:
s=[1,2]
a=[5,6]

s.extend(a) or s+a 
----------------------------------------------------------

Split function in Python:

s1="  hello world "
s1.split() //gives ["hello", "world"] no delimeter given and hence consider all the together white spaces as one
s1.split(" ") // gives ["", "", "hello", "world", ""] 

---------------------------------------------------------------

Reverse()

a=[1,2,3,4]
b=a.copy() // remember to copy as otherwise it is a reference
a.reverse() // change in place
a=> [4,3,2,1]
b=> [1,2,3,4]

Note- Reversing a string:
s1="abcde"

"".join(reversed(s1))  // as reversed gives a reversed object
or 
s1[::-1] 

------------------------------------------------------------

Sum of a list:
sum(l1)

Sum of a list for a particular index:

sum(l1[:k])

----------------------------------

Max of two elements:

max(a1,a2)

also applied to list:

max(l1)

------------------------

Sets are optimized than list as it uses O(1) time complexity to fetch an element and the same should apply for deletion as well.
They are unordered
we can only add or delete the items in set but can't change an element
They use hashmap and that's why it is O(1) as an average time complex to check in ele exists in set

set(l1)

set.add(ele)

s3=s1.union(s2)
s3=s1|s2

s1=s1.intersection(s2)
s1=s1&s2

s1=s1-s2 //difference between set

s1.clear()

s1.pop() // O(1)
s1.discard(ele) // remove a particular element and if it doesn't exist - no error simply return the original error O(1)
s1.remove(ele) // remove the element but if the ele doesn't exist, it gives an error O(1)

add elements to set 
s1.add(ele) //O(1)
s1.update(l1)
s1.union(s2)


--------------------------
Dict
Remove element in dictionary:

d1.pop(key) // O(1)
del d1[key] // O(1)

dictionaries are call by reference which means if you do:
d2=d1
d1.pop(1) // it will delete from both as they are same things, you need to do 

d2=d1.copy()

for i in d1:
print(i) // will give the keys

------------------------------------
List
remove an element from list:

l1.pop(index) //O(N)
del l1[index] //O(N)
l1.remove(ele) deletes the first occurence  //O(N)

add an element to list:

append, + , extend are there but can also use insert

l1.insert(index, ele)

Note: List is not a call by reference which means 
l1=l2 is fine to to do operations
--------------------------------------

