zip(): to iterate over two lists together for eg:
      a=[1,2,3]
      b=[5,6,7]
      for i,j in zip(a,b)
        print(i)
        print(j)
------------------------------------------------------------
slice(): to sice the things in two lists:
    a=[1,2,3,4,5,6,7,8]
    s=slice(3)
    a[s] will give you [1,2,3]

    s=slice(3,6)
    a[s] => [4,5,6]

-----------------------------------------------------------

join() : joins a sequence in such a way that output is string
  a=['a', 'b', 'c']
  "".join(a) => "abc"

  "$".join(a) => "a$b$c"

Note- join will only take str type as an input

-----------------------------------------------------------
range (n) gives 0 till n-1
eg : range(5) => 0,1,2,3,4

a=[1,2,3,4]
a="smarty"
for i in range(len(a)):
      print (a[i])

-----------------------------------------------------------

Square brackets in python:

ls=['a', 'b', 'c', 'd']

ls[0:len(ls)]=['a', 'b', 'c', 'd']
ls[1:3]= ['b', 'c'] as we exclude the actual end_index element

ls[:3]=['a', 'b', 'c'] (from beginning to end_index -1)
ls[2:]= ['c', 'd'] (from index to end)

-----------------------------------------------------------

Stack implementation in Python:

stack1 = deque()
stack1.append('a')
stack1.pop() //removes the last appended element just like stack

//list can also be used to pop and append but if you pop a particular index like l.pop(index) then it will O(N)

l1=['a', 'c', 'd']
stack1=deque(l1)

Manipulation of list seems easier in deque:
In the below way, we gave control from both ends for deletion and addition
stack1.appendleft('f')
stack1.popleft()

stack1.index("c") // index function can be used with string and list also as it returns the first occurence
-----------------------------------------------------------

->Convert String to a list of elements:
s1="abcd"
l1=list(s1)

->perform the operation like replacing the element:

l1[2]="e"
s2 = "".join(l1)

s2 will be "abed" now

->For replacing the each word in a string, simply use:
s1= "helloe world hello"
s2=s1.replace("hello", "hi") //can't change s1 as s1 is immutable so copying it to s2
s2 will be => hi world hi

-----------------------------------------------------------

Upper() and Lower() :

s1="abcdEF"
s1.isupper() //False
s1.islower() // False
s1.upper() // "ABCDEF"
s1.lower() // "abcdef"

--------------------------------------------------------------

Searching word in string:

s1 = "hello world"
"hello" in s1 // True

----------------------------------------------------------

ASCII value of a string char

s="f"
ord(s) #int(s) will give error

-----------------------------------------------------
Int to string:

str(12345) 
> '12345'
----------------------------------------------------------

append means, adding one element
extend means adding an iterable to list (can also be done with +)

eg:
s=[1,2]
a=[5,6]

s.extend(a) or s+a 
----------------------------------------------------------

Split function in Python:

s1="  hello world "
s1.split() //gives ["hello", "world"] no delimeter given and hence consider all the together white spaces as one
s1.split(" ") // gives ["", "", "hello", "world", ""] 

---------------------------------------------------------------

Reverse()

a=[1,2,3,4]
b=a.copy() // remember to copy as otherwise it is a reference
a.reverse() // change in place
a=> [4,3,2,1]
b=> [1,2,3,4]

Note- Reversing a string:
s1="abcde"

"".join(reversed(s1))  // as reversed gives a reversed object
or 
s1[::-1] 

------------------------------------------------------------

Sum of a list:
sum(l1)

Sum of a list for a particular index:

sum(l1[:k])

----------------------------------

Max of two elements:

max(a1,a2)

also applied to list:

max(l1)

------------------------

Sets are optimized than list as it uses O(1) time complexity to fetch an element and the same should apply for deletion as well.
They are unordered
we can only add or delete the items in set but can't change an element
They use hashmap and that's why it is O(1) as an average time complex to check in ele exists in set

set(l1)

set.add(ele)

s3=s1.union(s2)
s3=s1|s2

s1=s1.intersection(s2)
s1=s1&s2

s1=s1-s2 //difference between set

s1.clear()

s1.pop() // O(1)
s1.discard(ele) // remove a particular element and if it doesn't exist - no error simply return the original error O(1)
s1.remove(ele) // remove the element but if the ele doesn't exist, it gives an error O(1)

add elements to set 
s1.add(ele) //O(1)
s1.update(l1) // to add a list to set
s1.union(s2) // to add a set to set

sets are also call by reference:
s2=s1 will make changes to both with the operation on either
therefore, use:
s2=s1.copy()

--------------------------
Dict
Remove element in dictionary:

d1.pop(key) // O(1)
del d1[key] // O(1)

dictionaries are call by reference which means if you do:
d2=d1
d1.pop(1) // it will delete from both as they are same things, you need to do 

d2=d1.copy()

for i in d1:
print(i) // will give the keys

add elements to dict:

dict1[index]=value
dict1.update(dict2) // existing keys will be updated and new keys will be added

dict.items() => gives an iterator where list is there:
so you can iterate over it but if need to access it then simply convert it to list


------------------------------------
List
remove an element from list:

l1.pop(index) //O(N)
del l1[index] //O(N)
l1.remove(ele) deletes the first occurence  //O(N)

add an element to list:

append, + , extend are there but can also use insert

l1.insert(index, ele)

Note: List is  call by reference which means 
l1=l2 is not fine to to do operations
do l1=l2.copy()

----------------------------------------
Sort 

sorting a list:
l1.sort() // it is in place

sorted(l1) // it is not in place and can be applied to immutables as well
sorted(l1, reverse=True) // custom functions in sorted as well
sorted(l1, key=len) // custom on the basis of len

sorted(str) // if input is 'hello' output will be a list => ['e', 'h', 'l', 'l', 'o'] anc can be converted bac using "".join(l)

sorted(dict1.items()) // will sort on the basis of keys
sorted(dict1.items(), key= lambda x:x[1]) //sort on the basis of values as d1.items() gives a list of tuples where (key, value)
--------------------------------------

LinkedList:

class node:
      def __init__(self, data):
            self.data=data
            self.next=None

class LinkedList1:
      def __init__(self):
            self.head=None
      def append(self, data):
            check if head is empty
            if not, reach the end by iterating through self.head.next and place the node there

      def delete(self, val):
            reach the place self.curr.data matches
            make the prev.next point to curr.next

IMP: Python has garbage collector due to which we don't need to delete the unallocated space manually unlike in C++
     Python automatically deletes the objects which are not referenced or are not unaccessible helping us to avoid memory leak
     Java also does the same, even C# as well
     but C++ doesn't have a garbage collector, we have delete the memory manually.



------------------------------
Lambda Fnction:
str1 = 'GeeksforGeeks'
 
upper = lambda string: string.upper()
print(upper(str1))

-------------------------------
Max value of int:
sys.maxsize

Min value of int:
-sys.maxsize

--------------------------------
defining an array of a constant value

arr=[1]*n
or
arr=[0]*n

------------------------------------
defining a dict with default values of 0

dict1 = defaultdict(int)
dict1[3]+=1 #Works as by default the value was zero

dict1 ={}
dict1[3]+=1 #Error: as the key doesn't exist

---- or ---- //alternte way if forgets defaultdict:
dict1={}
for i in arr:
      dict1[i] = dict1.get(i, 0) + 1 // using dict1.get(ele, defualt value) will give the default value as zero


defining a dict with default empty list as values
d1=defaultdict(list)


-----------------------------------

Note that Lists are NOT hashable and can't be used as keys in dict and can't be stored in sets
: Convert them to tuple or string to store them

------------------------------------------------

Always use STACK where we see that the operation of the current elements affects the previous elements

-----------------------------------------------

from collections import Counter
In a case where we have to count the occurences of an element in the List-use Counter
nums=[1,2,1,1,2,3,3,4,4]
countDict=Counter(nums)

countDict will be:
{1:3, 2:2, 3:2, 4:2}

--------------------------------------------

import heapq

nums= [2,3,4,1,2]
heapq.heapify(nums) #This is inplace
O(NLogN)

heapq.heappop() => pops the smallest element from heap (in place)
=> 1
O(LogN)

heapq.heappush(4) => puts into it maintaining heap property (in place)
O(LogN)
