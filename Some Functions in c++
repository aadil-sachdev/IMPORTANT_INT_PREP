string str;
getline(cin,str);
//cin.ignore();
str="geeksforgeeks";
std::string::iterator it;
for(it=str.begin();it!=str.end();it++)
{
cout<<*it;
}

string str1;
getline(cin,str1);
std::string::reverse_iterator rit;      //reverese iteration
for(it=str1.rbegin;it!=rend;it++)
{
cout<<*rit;
}


std::sort() in C++ STL
sort(arr, arr+n); 

swap(a, b)

ceil(x)

floor(x)

if(binary_search(arr.begin(), arr.end(), 15)

max_element(v, v + 4);                                     // max element in an array where v is the array

pair <int, char> PAIR1 ; 
    PAIR1.first = 100; 
    PAIR1.second = 'G' ;                                   // pair is just like a box conataining data of two different types
              
pair <string,double> PAIR2 ("GeeksForGeeks", 1.23);        // One more way;

pair<int, int> p[n];                                       // Array of pairs;
sort(p, p+n);                                              // Sorting of pairs;

map<string, int> map_name;
map_name[string_index]=int_value;       // just like an array;
map<string, int> :: iterator it;        // this is used for iteration
for(it=map_name.begin();it!=map_name.end();it++)
{
    cout<<map_name[it->first]<<endl;
}

string str;
getline(cin,str);
str.push_back(element);
str.pop_back(element);
str.resize(length);
str.begin();
str.end();
str1.copy(str2,length,start_index);     //Copies str1 into str2;
str1.append(str2);
// Comparing strings using compare() 
    if ( str.compare(str1) == 0 )
    
  

// initialization by raw string 
    string str1("Your content");
    string str2(str1); 
    string str4(str1, 6, 6);
  
   // Inserting "Geeks" at 8th index position 
    str.insert(8,"Geeks"); 
  
    str.clear();                    //EMPTIES THE STRING
    int len = str6.length();
    char ch = str6.at(2);
    
    Vectors--------------------------------------------------------------
    
    vector<int> g1;
    for (int i = 1; i <= 5; i++) 
        g1.push_back(i); 
        
        v.pop_back();               // Removes the last element;
        v.clear();                  //Empties the Vector
        
        int n=g1.size();              //No of elements 
        
        
        
        STACK-------------------------------------------------------------
        
        
// CPP program to demonstrate working of STL stack 
#include <iostream> 
#include <stack> 
using namespace std; 
  
void showstack(stack <int> s) 
{ 
    while (!s.empty()) 
    { 
        cout << '\t' << s.top(); 
        s.pop(); 
    } 
    cout << '\n'; 
} 
  
int main () 
{ 
    stack <int> s; 
    s.push(10); 
    s.push(30); 
    s.push(20); 
    s.push(5); 
    s.push(1); 
  
    cout << "The stack is : "; 
    showstack(s); 
  
    cout << "\ns.size() : " << s.size(); 
    cout << "\ns.top() : " << s.top(); 
  
  
    cout << "\ns.pop() : "; 
    s.pop(); 
    showstack(s); 
  
    return 0; 
} 


QUEUE-----------------------------------------------------------------


// CPP code to illustrate  
// Queue in Standard Template Library (STL) 
#include <iostream> 
#include <queue> 
  
using namespace std; 
  
void showq(queue <int> gq) 
{ 
    queue <int> g = gq; 
    while (!g.empty()) 
    { 
        cout << '\t' << g.front(); 
        g.pop(); 
    } 
    cout << '\n'; 
} 
  
int main() 
{ 
    queue <int> gquiz; 
    gquiz.push(10); 
    gquiz.push(20); 
    gquiz.push(30); 
  
    cout << "The queue gquiz is : "; 
    showq(gquiz); 
  
    cout << "\ngquiz.size() : " << gquiz.size(); 
    cout << "\ngquiz.front() : " << gquiz.front(); 
    cout << "\ngquiz.back() : " << gquiz.back(); 
  
    cout << "\ngquiz.pop() : "; 
    gquiz.pop(); 
    showq(gquiz); 
  
    return 0; 
} 


